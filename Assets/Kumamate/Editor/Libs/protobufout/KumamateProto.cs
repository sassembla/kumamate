// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobufout/kumamate_proto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kumamate {

  /// <summary>Holder for reflection information generated from protobufout/kumamate_proto.proto</summary>
  public static partial class KumamateProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for protobufout/kumamate_proto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KumamateProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBwcm90b2J1Zm91dC9rdW1hbWF0ZV9wcm90by5wcm90bxIIa3VtYW1hdGUi",
            "dAoORmlnbWFGcmFtZURhdGESEgoKaWRlbnRpZmllchgBIAEoCRIkCgdhYnNS",
            "ZWN0GAIgASgLMhMua3VtYW1hdGUuRmlnbWFSZWN0EigKCGNoaWxkcmVuGAMg",
            "AygLMhYua3VtYW1hdGUuRmlnbWFDb250ZW50ItcBCgxGaWdtYUNvbnRlbnQS",
            "DAoEdHlwZRgBIAEoCRIKCgJpZBgCIAEoCRIkCgdhYnNSZWN0GAMgASgLMhMu",
            "a3VtYW1hdGUuRmlnbWFSZWN0EigKCGNoaWxkcmVuGAQgAygLMhYua3VtYW1h",
            "dGUuRmlnbWFDb250ZW50Ei0KCXJlY3RhbmdsZRgFIAEoCzIYLmt1bWFtYXRl",
            "LkZpZ21hUmVjdGFuZ2xlSAASIwoEdGV4dBgGIAEoCzITLmt1bWFtYXRlLkZp",
            "Z21hVGV4dEgAQgkKB2NvbnRlbnQiPAoORmlnbWFSZWN0YW5nbGUSCQoBchgB",
            "IAEoAhIJCgFnGAIgASgCEgkKAWIYAyABKAISCQoBYRgEIAEoAiKUAQoJRmln",
            "bWFUZXh0EhIKCmNoYXJhY3RlcnMYASABKAkSGgoSZm9udFBvc3RTY3JpcHRO",
            "YW1lGAIgASgJEhAKCGZvbnRTaXplGAMgASgFEhkKEWxpbmVIZWlnaHRQZXJj",
            "ZW50GAQgASgCEgkKAXIYBSABKAISCQoBZxgGIAEoAhIJCgFiGAcgASgCEgkK",
            "AWEYCCABKAIiQAoJRmlnbWFSZWN0EgkKAXgYASABKAISCQoBeRgCIAEoAhIN",
            "CgV3aWR0aBgDIAEoAhIOCgZoZWlnaHQYBCABKAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kumamate.FigmaFrameData), global::Kumamate.FigmaFrameData.Parser, new[]{ "Identifier", "AbsRect", "Children" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kumamate.FigmaContent), global::Kumamate.FigmaContent.Parser, new[]{ "Type", "Id", "AbsRect", "Children", "Rectangle", "Text" }, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kumamate.FigmaRectangle), global::Kumamate.FigmaRectangle.Parser, new[]{ "R", "G", "B", "A" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kumamate.FigmaText), global::Kumamate.FigmaText.Parser, new[]{ "Characters", "FontPostScriptName", "FontSize", "LineHeightPercent", "R", "G", "B", "A" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kumamate.FigmaRect), global::Kumamate.FigmaRect.Parser, new[]{ "X", "Y", "Width", "Height" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FigmaFrameData : pb::IMessage<FigmaFrameData> {
    private static readonly pb::MessageParser<FigmaFrameData> _parser = new pb::MessageParser<FigmaFrameData>(() => new FigmaFrameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FigmaFrameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kumamate.KumamateProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaFrameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaFrameData(FigmaFrameData other) : this() {
      identifier_ = other.identifier_;
      absRect_ = other.absRect_ != null ? other.absRect_.Clone() : null;
      children_ = other.children_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaFrameData Clone() {
      return new FigmaFrameData(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private string identifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "absRect" field.</summary>
    public const int AbsRectFieldNumber = 2;
    private global::Kumamate.FigmaRect absRect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kumamate.FigmaRect AbsRect {
      get { return absRect_; }
      set {
        absRect_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Kumamate.FigmaContent> _repeated_children_codec
        = pb::FieldCodec.ForMessage(26, global::Kumamate.FigmaContent.Parser);
    private readonly pbc::RepeatedField<global::Kumamate.FigmaContent> children_ = new pbc::RepeatedField<global::Kumamate.FigmaContent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kumamate.FigmaContent> Children {
      get { return children_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FigmaFrameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FigmaFrameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Identifier != other.Identifier) return false;
      if (!object.Equals(AbsRect, other.AbsRect)) return false;
      if(!children_.Equals(other.children_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (absRect_ != null) hash ^= AbsRect.GetHashCode();
      hash ^= children_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Identifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
      if (absRect_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AbsRect);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (absRect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AbsRect);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FigmaFrameData other) {
      if (other == null) {
        return;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      if (other.absRect_ != null) {
        if (absRect_ == null) {
          AbsRect = new global::Kumamate.FigmaRect();
        }
        AbsRect.MergeFrom(other.AbsRect);
      }
      children_.Add(other.children_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
          case 18: {
            if (absRect_ == null) {
              AbsRect = new global::Kumamate.FigmaRect();
            }
            input.ReadMessage(AbsRect);
            break;
          }
          case 26: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FigmaContent : pb::IMessage<FigmaContent> {
    private static readonly pb::MessageParser<FigmaContent> _parser = new pb::MessageParser<FigmaContent>(() => new FigmaContent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FigmaContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kumamate.KumamateProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaContent(FigmaContent other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      absRect_ = other.absRect_ != null ? other.absRect_.Clone() : null;
      children_ = other.children_.Clone();
      switch (other.ContentCase) {
        case ContentOneofCase.Rectangle:
          Rectangle = other.Rectangle.Clone();
          break;
        case ContentOneofCase.Text:
          Text = other.Text.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaContent Clone() {
      return new FigmaContent(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "absRect" field.</summary>
    public const int AbsRectFieldNumber = 3;
    private global::Kumamate.FigmaRect absRect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kumamate.FigmaRect AbsRect {
      get { return absRect_; }
      set {
        absRect_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Kumamate.FigmaContent> _repeated_children_codec
        = pb::FieldCodec.ForMessage(34, global::Kumamate.FigmaContent.Parser);
    private readonly pbc::RepeatedField<global::Kumamate.FigmaContent> children_ = new pbc::RepeatedField<global::Kumamate.FigmaContent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kumamate.FigmaContent> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "rectangle" field.</summary>
    public const int RectangleFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kumamate.FigmaRectangle Rectangle {
      get { return contentCase_ == ContentOneofCase.Rectangle ? (global::Kumamate.FigmaRectangle) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Rectangle;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kumamate.FigmaText Text {
      get { return contentCase_ == ContentOneofCase.Text ? (global::Kumamate.FigmaText) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Text;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      Rectangle = 5,
      Text = 6,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FigmaContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FigmaContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(AbsRect, other.AbsRect)) return false;
      if(!children_.Equals(other.children_)) return false;
      if (!object.Equals(Rectangle, other.Rectangle)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (absRect_ != null) hash ^= AbsRect.GetHashCode();
      hash ^= children_.GetHashCode();
      if (contentCase_ == ContentOneofCase.Rectangle) hash ^= Rectangle.GetHashCode();
      if (contentCase_ == ContentOneofCase.Text) hash ^= Text.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (absRect_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AbsRect);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (contentCase_ == ContentOneofCase.Rectangle) {
        output.WriteRawTag(42);
        output.WriteMessage(Rectangle);
      }
      if (contentCase_ == ContentOneofCase.Text) {
        output.WriteRawTag(50);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (absRect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AbsRect);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (contentCase_ == ContentOneofCase.Rectangle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rectangle);
      }
      if (contentCase_ == ContentOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FigmaContent other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.absRect_ != null) {
        if (absRect_ == null) {
          AbsRect = new global::Kumamate.FigmaRect();
        }
        AbsRect.MergeFrom(other.AbsRect);
      }
      children_.Add(other.children_);
      switch (other.ContentCase) {
        case ContentOneofCase.Rectangle:
          if (Rectangle == null) {
            Rectangle = new global::Kumamate.FigmaRectangle();
          }
          Rectangle.MergeFrom(other.Rectangle);
          break;
        case ContentOneofCase.Text:
          if (Text == null) {
            Text = new global::Kumamate.FigmaText();
          }
          Text.MergeFrom(other.Text);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            if (absRect_ == null) {
              AbsRect = new global::Kumamate.FigmaRect();
            }
            input.ReadMessage(AbsRect);
            break;
          }
          case 34: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 42: {
            global::Kumamate.FigmaRectangle subBuilder = new global::Kumamate.FigmaRectangle();
            if (contentCase_ == ContentOneofCase.Rectangle) {
              subBuilder.MergeFrom(Rectangle);
            }
            input.ReadMessage(subBuilder);
            Rectangle = subBuilder;
            break;
          }
          case 50: {
            global::Kumamate.FigmaText subBuilder = new global::Kumamate.FigmaText();
            if (contentCase_ == ContentOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class FigmaRectangle : pb::IMessage<FigmaRectangle> {
    private static readonly pb::MessageParser<FigmaRectangle> _parser = new pb::MessageParser<FigmaRectangle>(() => new FigmaRectangle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FigmaRectangle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kumamate.KumamateProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaRectangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaRectangle(FigmaRectangle other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaRectangle Clone() {
      return new FigmaRectangle(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private float r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private float g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private float b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FigmaRectangle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FigmaRectangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0F) {
        size += 1 + 4;
      }
      if (G != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (A != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FigmaRectangle other) {
      if (other == null) {
        return;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      if (other.G != 0F) {
        G = other.G;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            R = input.ReadFloat();
            break;
          }
          case 21: {
            G = input.ReadFloat();
            break;
          }
          case 29: {
            B = input.ReadFloat();
            break;
          }
          case 37: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FigmaText : pb::IMessage<FigmaText> {
    private static readonly pb::MessageParser<FigmaText> _parser = new pb::MessageParser<FigmaText>(() => new FigmaText());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FigmaText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kumamate.KumamateProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaText(FigmaText other) : this() {
      characters_ = other.characters_;
      fontPostScriptName_ = other.fontPostScriptName_;
      fontSize_ = other.fontSize_;
      lineHeightPercent_ = other.lineHeightPercent_;
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaText Clone() {
      return new FigmaText(this);
    }

    /// <summary>Field number for the "characters" field.</summary>
    public const int CharactersFieldNumber = 1;
    private string characters_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Characters {
      get { return characters_; }
      set {
        characters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fontPostScriptName" field.</summary>
    public const int FontPostScriptNameFieldNumber = 2;
    private string fontPostScriptName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FontPostScriptName {
      get { return fontPostScriptName_; }
      set {
        fontPostScriptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fontSize" field.</summary>
    public const int FontSizeFieldNumber = 3;
    private int fontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FontSize {
      get { return fontSize_; }
      set {
        fontSize_ = value;
      }
    }

    /// <summary>Field number for the "lineHeightPercent" field.</summary>
    public const int LineHeightPercentFieldNumber = 4;
    private float lineHeightPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LineHeightPercent {
      get { return lineHeightPercent_; }
      set {
        lineHeightPercent_ = value;
      }
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 5;
    private float r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 6;
    private float g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 7;
    private float b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 8;
    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FigmaText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FigmaText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Characters != other.Characters) return false;
      if (FontPostScriptName != other.FontPostScriptName) return false;
      if (FontSize != other.FontSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LineHeightPercent, other.LineHeightPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Characters.Length != 0) hash ^= Characters.GetHashCode();
      if (FontPostScriptName.Length != 0) hash ^= FontPostScriptName.GetHashCode();
      if (FontSize != 0) hash ^= FontSize.GetHashCode();
      if (LineHeightPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LineHeightPercent);
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Characters.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Characters);
      }
      if (FontPostScriptName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FontPostScriptName);
      }
      if (FontSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FontSize);
      }
      if (LineHeightPercent != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(LineHeightPercent);
      }
      if (R != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Characters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Characters);
      }
      if (FontPostScriptName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FontPostScriptName);
      }
      if (FontSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontSize);
      }
      if (LineHeightPercent != 0F) {
        size += 1 + 4;
      }
      if (R != 0F) {
        size += 1 + 4;
      }
      if (G != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (A != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FigmaText other) {
      if (other == null) {
        return;
      }
      if (other.Characters.Length != 0) {
        Characters = other.Characters;
      }
      if (other.FontPostScriptName.Length != 0) {
        FontPostScriptName = other.FontPostScriptName;
      }
      if (other.FontSize != 0) {
        FontSize = other.FontSize;
      }
      if (other.LineHeightPercent != 0F) {
        LineHeightPercent = other.LineHeightPercent;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      if (other.G != 0F) {
        G = other.G;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Characters = input.ReadString();
            break;
          }
          case 18: {
            FontPostScriptName = input.ReadString();
            break;
          }
          case 24: {
            FontSize = input.ReadInt32();
            break;
          }
          case 37: {
            LineHeightPercent = input.ReadFloat();
            break;
          }
          case 45: {
            R = input.ReadFloat();
            break;
          }
          case 53: {
            G = input.ReadFloat();
            break;
          }
          case 61: {
            B = input.ReadFloat();
            break;
          }
          case 69: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FigmaRect : pb::IMessage<FigmaRect> {
    private static readonly pb::MessageParser<FigmaRect> _parser = new pb::MessageParser<FigmaRect>(() => new FigmaRect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FigmaRect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kumamate.KumamateProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaRect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaRect(FigmaRect other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FigmaRect Clone() {
      return new FigmaRect(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FigmaRect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FigmaRect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (Height != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Width != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FigmaRect other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Width = input.ReadFloat();
            break;
          }
          case 37: {
            Height = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
